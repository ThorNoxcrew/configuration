input = {
    name = grid_runners
}

sections = {
    arena = [
        [0, 0]
        [1, 0]
    ]
    rooms = {
        [11, 9]
        [12, 9]
        [13, 9]
        [14, 9]
    }
}

scanner = [
    // general markers for the arena
    {
        sections = {
            strategy = ALLOW
            entries = [ arena ]
        }
        targets = {
            player_spawnpoints = {
                type = grouped
                marker = "mcc:markers.player_spawnpoints"
                amount = 40..40
            }
            spectator_spawnpoints = {
                type = single
                marker = "mcc:markers.spectator_spawnpoints"
            }
            spawn_barriers = {
                type = area
                marker = "mcc:markers.spawn_barriers"
                amount = 1..
                metadata = {
                    "Block" = {
                        type = String
                    }
                }
            }

            paste_anchors = {
                type = single
                marker = "mcc:markers.grid_runners.paste_anchor.normal"
                amount = 32..32
                metadata = {
                    "Room" = {
                        type = Int
                    }
                }
            }
            mirror_paste_anchors = {
                type = single
                marker = "mcc:markers.grid_runners.paste_anchor.mirrored"
                amount = 32..32
                metadata = {
                    "Room" = {
                        type = Int
                    }
                }
            }
           edge_paste_anchors = {
                type = single
                marker = "mcc:markers.grid_runners.paste_anchor.normal.edge"
                amount = 8..8
                metadata = {
                    "Room" = {
                        type = Int
                    }
                }
            }
            mirror_edge_paste_anchors = {
                type = single
                marker = "mcc:markers.grid_runners.paste_anchor.mirrored.edge"
                amount = 8..8
                metadata = {
                    "Room" = {
                        type = Int
                    }
                }
            }
        }
    }
    // markers to find room templates
    {
        sections = {
            strategy = ALLOW
            entries = [ rooms ]
        }
        targets = {
            rooms = {
                type = area
                marker = "mcc:markers.grid_runners.room"
                metadata = {
                    "Room" = {
                        type = String
                    }
                    "Category" = {
                        type = String
                        amount = 1..
                    }
                }
                amount = 1..
            }
            room_walls = {
                type = area
                marker = "mcc:markers.grid_runners.wall"
                metadata = {
                    "Room" = {
                        type = String
                    }
                }
                amount = 1..
            }
        }
    }
    // general markers inside rooms
    {
        areas = [
            rooms
        ]
        targets = {
            entry_scales = {
                type = single
                marker = "mcc:markers.grid_runners.entry_scales"
                metadata = {
                    "Amount" = {
                        type = Double
                    }
                }
                amount = 1..
            }
            entry_door.in {
                type = single
                marker = "mcc:markers.grid_runners.entry_door.in"
                amount = 1..
            }
            entry_door.out {
                type = single
                marker = "mcc:markers.grid_runners.entry_door.out"
                amount = 1..
            }
            exit_door {
                type = single
                marker = "mcc:markers.grid_runners.exit_door"
                amount = 1..
            }
        }
    }
    // "redstone_signal" rooms
    {
        areas = [
            rooms/Category=redstone_signal
        ]
        targets = {
            input = {
                type = single
                marker = "mcc:markers.grid_runners.redstone_signal.input"
                amount = 1..
                metadata = {
                    "Id" = {
                        type = Int
                        amount = 0..1
                    }
                }
            }
            output = {
                type = single
                marker = "mcc:markers.grid_runners.redstone_signal.output"
                amount = 0..
                metadata = {
                    "Id" = {
                        type = Int
                        amount = 0..1
                    }
                }
            }
        }
    }
]

processors = [
    {
        type = grid_runners_assembler
        filter = [
            strategy = ALLOW
            entries = [ arena ]
        ]
        mirroredRooms = [
            picture_panic
        ]

        selectedPreset = test
        presets = {
            test = [
                gliding
                sawmill
                bakery
                mansion
                courtyard
                minigolf
                tower
                prison
            ]
        }
    }
    {
        type = remove_sections
        filter = {
            strategy = ALLOW
            entries = [ rooms ]
        }
    }
    {
        type = lighting_updater
    }
    {
        type = empty_region_padding
    }
]

// And here's some of the old json that I haven't yet converted into new shiny hocon.
                "light_lamps": {
                    "lamp": {
                        "type": "single",
                        "block": "mcc:markers.grid_runners.light_lamps.lamp",
                        "limit": "1.."
                    }
                },
                "find_key": {
                    "key": {
                        "type": "single",
                        "block": "mcc:markers.grid_runners.find_key.key",
                        "limit": "1.."
                    }
                },
                "replicate": {
                    "example": {
                        "type": "area",
                        "min": "mcc:markers.grid_runners.replicate.example.min",
                        "max": "mcc:markers.grid_runners.replicate.example.max",
                        "signs": {
                            "strategy": "ALLOW",
                            "entries": ["Id"]
                        },
                        "limit": "1.."
                    },
                    "plot": {
                        "type": "area",
                        "min": "mcc:markers.grid_runners.replicate.plot.min",
                        "max": "mcc:markers.grid_runners.replicate.plot.max",
                        "signs": {
                            "strategy": "ALLOW",
                            "entries": ["Id"]
                        },
                        "limit": "1.."
                    },
                    "source": {
                        "type": "area",
                        "min": "mcc:markers.grid_runners.replicate.source.min",
                        "max": "mcc:markers.grid_runners.replicate.source.max",
                        "signs": {
                            "strategy": "ALLOW",
                            "entries": ["Id"]
                        }
                    }
                },
                "item_check": {},
                "block_check": {
                    "add_block_single": {
                        "type": "single",
                        "block": "mcc:markers.grid_runners.block_check.add",
                        "signs": {
                            "strategy": "ALLOW",
                            "entries": ["Block"]
                        }
                    },
                    "add_block_area": {
                        "type": "area",
                        "min": "mcc:markers.grid_runners.block_check.add.min",
                        "max": "mcc:markers.grid_runners.block_check.add.max",
                        "signs": {
                            "strategy": "ALLOW",
                            "entries": ["Block"]
                        }
                    },
                    "remove_block_single": {
                        "type": "single",
                        "block": "mcc:markers.grid_runners.block_check.remove",
                        "signs": {
                            "strategy": "ALLOW",
                            "entries": ["Block"]
                        }
                    },
                    "remove_block_area": {
                        "type": "area",
                        "min": "mcc:markers.grid_runners.block_check.remove.min",
                        "max": "mcc:markers.grid_runners.block_check.remove.max",
                        "signs": {
                            "strategy": "ALLOW",
                            "entries": ["Block"]
                        }
                    }
                },
                "slay_enemies": {
                    "mob_spawns": {
                        "type": "single",
                        "block": "mcc:markers.mob_spawn.extra",
                        "signs": {
                            "strategy": "ALLOW",
                            "entries": ["Mob"]
                        }
                    },
                    "mob_spawners": {
                        "type": "single",
                        "block": "mcc:markers.mob_spawner.extra",
                        "signs": {
                            "strategy": "ALLOW",
                            "entries": ["Mob"]
                        }
                    }
                }
