server = island

worlds = [
    {
        name = parkour_tag_quad

        sections = {
            ref_maps = [
                [0, 0]
                [0, -1]
            ]
            ref_podiums = [
                [9, 0]
            ]
            ref_unused = [[8, -1]]
        }
    }
]

scans = [
    {
        sections = [
            "ref_maps"
        ]
        targets = {
            maps = {
                type = REGION
                marker = "mcc:markers.box.map"
                amount = 1..
                metadata = {
                    "Id" = {
                        type = String
                    }
                }
            }
            hub_hat = {
                type = REGION
                marker = "mcc:markers.box.hub_hat"
                amount = "1"
            }
            match_hat = {
                type = REGION
                marker = "mcc:markers.box.match_hat"
                amount = "1"
            }
        }
    }
    {
        sections = [
            ref_podiums
        ]
        targets = {
            podium_spawnpoint = {
                type = TRANSFORM
                marker = "mcc:markers.podium.spawnpoint"
                amount = "1"
            }
            podiums = {
                type = TRANSFORM
                marker = "mcc:markers.podium.placement"
                metadata = {
                    "Position" = {
                        type = Int
                    }
                }
                amount = 1..
           }
           podium_self = {
                type = TRANSFORM
                marker = "mcc:markers.podium.self"
                amount = "1"
           }
        }
    }
    {
        areas = [
            hub_hat
            match_hat
            maps
        ]
        targets = {
            anchor = {
                type = BLOCK
                marker = "mcc:markers.box.anchor"
                amount = "1"
            }
        }
    }
    {
        areas = [
            hub_hat
        ]
        targets = {
            player_spawnpoints = {
                type = TRANSFORM
                marker = "mcc:markers.player_spawnpoint"
                amount = "2.."
            }
            spectator_spawnpoint = {
                type = TRANSFORM
                marker = "mcc:markers.spectator_spawnpoint"
                amount = 1..
            }
        }
    }
    {
        areas = [
            maps
        ]
        targets = {
            # Home in this case will always be the hunters
            home_colored = {
                type = BLOCK
                marker = "mcc:markers.box.home_colored"
            }
            # Away in this case will always be the runners
            away_colored = {
                type = BLOCK
                marker = "mcc:markers.box.away_colored"
            }
            doors = {
                type = DOMAIN
                marker = "mcc:markers.box.door"
                amount = "2.."
            }
            # Home in this case will always be the hunters
            home_area = {
                type = REGION
                marker = "mcc:markers.box.home"
                amount = "1"
            }
            # Away in this case will always be the runners
            away_area = {
                type = REGION
                marker = "mcc:markers.box.away"
                amount = "1"
            }
            tagger_spawnpoints = {
                type = TRANSFORM
                marker = "mcc:markers.parkour_tag.hunter_spawnpoint"
                amount = 2..
            }
            runner_spawnpoints = {
                type = TRANSFORM
                marker = "mcc:markers.parkour_tag.runner_spawnpoint"
                amount = 6..
            }
            spawnpoints = {
                type = TRANSFORM
                marker = "mcc:markers.parkour_tag.lounge_spawnpoint"
                amount = 8..
            }
            spectator_spawnpoint = {
                type = TRANSFORM
                marker = "mcc:markers.spectator_spawnpoint"
                amount = 1..
            }
        }
    }
]